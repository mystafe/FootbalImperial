import "./App.css"
import { useEffect, useRef, useState } from "react"
import { Spinner } from "./components/Spinner"
import MapView from "./components/Map"
import { useGameStore, DIRECTIONS, COUNTRIES } from "./store/game"
import { createRng, weightedChoice } from "./lib/random"
import { playCapture, playClick, playVictory, playDefeat } from "./lib/sound"
import { AnimatePresence, motion } from "framer-motion"
import { loadConfig, saveConfig, type GameConfig } from "./config/game"

function App() {
  const seed = useGameStore((s) => s.seed)
  const teams = useGameStore((s) => s.teams)
  const cells = useGameStore((s) => s.cells)
  const history = useGameStore((s) => s.history)
  const turn = useGameStore((s) => s.turn)
  const applyAttack = useGameStore((s) => s.applyAttack)
  const playAutoTurn = useGameStore((s) => s.playAutoTurn)
  const gameStarted = useGameStore(
    (s) => (s as unknown as { gameStarted: boolean }).gameStarted
  )
  const setGameStarted = useGameStore(
    (s) => s.setGameStarted as (v: boolean) => void
  )
  const selectedCountry = useGameStore((s) => s.selectedCountry)
  const setCountry = useGameStore((s) => s.setCountry)
  const numTeams = useGameStore((s) => s.numTeams)
  const setNumTeams = useGameStore((s) => s.setNumTeams)
  const mapColoring = useGameStore((s) => s.mapColoring)
  const setMapColoring = useGameStore((s) => s.setMapColoring)

  // Config state
  const [config, setConfig] = useState<GameConfig>(loadConfig())
  const setPreviewTarget = useGameStore((s) => s.setPreviewTarget)
  const resolveTarget = useGameStore((s) => s.resolveTarget)
  const setSuppressLastOverlay = useGameStore(
    (s) => s.setSuppressLastOverlay as (v: boolean) => void
  )
  const setFrozenSnapshotIndex = useGameStore(
    (s) =>
      (s as unknown as { setFrozenSnapshotIndex: (idx?: number) => void })
        .setFrozenSnapshotIndex
  )
  const setPreviewFromTeamId = useGameStore(
    (s) =>
      (s as unknown as { setPreviewFromTeamId: (id?: number) => void })
        .setPreviewFromTeamId
  )

  const [teamWinner, setTeamWinner] = useState<number | null>(null)
  const [dirWinner, setDirWinner] = useState<number | null>(null)
  const [uiStep, setUiStep] = useState<
    | "team"
    | "dir"
    | "dir-select"
    | "attack-confirm"
    | "attacking"
    | "team-select"
    | null
  >(null)
  const [teamSpinTarget, setTeamSpinTarget] = useState<number | undefined>(
    undefined
  )
  const [dirSpinTarget, setDirSpinTarget] = useState<number | undefined>(
    undefined
  )
  const [spinnerSize, setSpinnerSize] = useState<number>(300)
  const [toast, setToast] = useState<string | null>(null)
  const [showAttackerInfo, setShowAttackerInfo] = useState<boolean>(false)
  const [showDefenderInfo, setShowDefenderInfo] = useState<boolean>(false)
  const isSpinning = uiStep === "team" || uiStep === "dir"
  const disabledTeamBtn = isSpinning
  const disabledDirBtn = isSpinning || uiStep !== "dir-select"
  const disabledApplyBtn = isSpinning || uiStep !== "attack-confirm"
  const rngRef = useRef<() => number>(() => Math.random())
  const [defenderInfo, setDefenderInfo] = useState<{
    name: string
    ovr: number
  } | null>(null)

  const liveTeams = teams.filter((t) => t.alive)

  useEffect(() => {
    rngRef.current = createRng(`${seed}:spins:${teams.length}:${cells.length}`)
  }, [seed, teams.length, cells.length])

  useEffect(() => {
    const onResize = () => {
      const w = window.innerWidth
      setSpinnerSize(w >= 1536 ? 350 : w >= 1280 ? 320 : w >= 1024 ? 300 : 280)
    }
    onResize()
    window.addEventListener("resize", onResize)
    return () => window.removeEventListener("resize", onResize)
  }, [])

  useEffect(() => {
    if (!history.length) return
    const h = history[history.length - 1]
    const attacker = teams.find((t) => t.id === h.attackerTeamId)
    const defender = teams.find((t) => t.id === (h.defenderTeamId ?? -1))
    const aName = attacker?.name ?? `Takım ${h.attackerTeamId + 1}`
    const dName = defender?.name ?? `?`
    const winnerName = h.attackerWon ? aName : defender?.name ?? dName
    const msg = `${aName} → ${dName} — ${winnerName} kazandı!`
    setToast(msg)
    const t = setTimeout(() => setToast(null), 3000)
    return () => clearTimeout(t)
  }, [history, teams])

  // Find potential defender when direction is chosen
  const teamAndCellIds = JSON.stringify({
    t: teams.map((t) => t.id),
    c: cells.map((c) => c.id)
  })
  useEffect(() => {
    if (
      teamWinner !== null &&
      dirWinner !== null &&
      uiStep === "attack-confirm"
    ) {
      const liveTeams = teams.filter((t) => t.alive)
      const attackerTeam = liveTeams[teamWinner]
      const direction = DIRECTIONS[dirWinner]
      if (!attackerTeam) return

      const t = resolveTarget(attackerTeam.id, direction)
      if (t) {
        const defenderId = cells.find((c) => c.id === t.toCellId)?.ownerTeamId
        const defender = teams.find((tm) => tm.id === defenderId)
        if (defender) {
          setDefenderInfo({ name: defender.name, ovr: defender.overall ?? 75 })
        } else if (defenderId === -1) {
          setDefenderInfo({ name: "Neutral Zone", ovr: 50 })
        }
        try {
          setPreviewTarget(t.fromCellId, t.toCellId)
        } catch (e) {
          console.warn(e)
        }
      }
    } else {
      setDefenderInfo(null)
      // keep any previously set preview target during selection flow
    }
  }, [
    uiStep,
    teamWinner,
    dirWinner,
    teamAndCellIds,
    teams,
    cells,
    setPreviewTarget,
    resolveTarget
  ])

  const pickWeightedTeamIndex = () => {
    if (liveTeams.length === 0) return 0
    const counts = liveTeams.map(
      (t) => cells.filter((c) => c.ownerTeamId === t.id).length
    )
    const maxCount = Math.max(...counts)
    const weights = liveTeams.map((t, i) => {
      const count = counts[i]
      // Prefer teams with fewer cells (underdogs)
      const underdogBonus = count < maxCount ? 1.5 : 1.0
      // Prefer teams with higher overall ratings
      const ratingBonus = (t.overall ?? 75) / 100
      return underdogBonus * ratingBonus
    })
    const rng = createRng(`${seed}:wteam:${turn}:${Date.now()}`)
    return weightedChoice(weights, rng)
  }

  const pickWeightedDirectionIndex = (attackerTeamId: number) => {
    const dirAngle: Record<string, number> = {
      E: 0,
      NE: 45,
      N: 90,
      NW: 135,
      W: 180,
      SW: 225,
      S: 270,
      SE: 315
    }
    const attackerCells = cells.filter((c) => c.ownerTeamId === attackerTeamId)
    if (attackerCells.length === 0) return 0

    // Find valid neighboring teams
    const validNeighbors = new Set<number>()
    for (const cell of attackerCells) {
      const neighbors = cells.filter((c) => {
        // Simple neighbor detection based on distance
        const dx = c.centroid[0] - cell.centroid[0]
        const dy = c.centroid[1] - cell.centroid[1]
        const dist = Math.sqrt(dx * dx + dy * dy)
        return dist < 100 && c.ownerTeamId !== attackerTeamId
      })
      for (const nb of neighbors) {
        if (!nb || nb.ownerTeamId === attackerTeamId) continue
        validNeighbors.add(nb.ownerTeamId)
      }
    }

    // If no valid neighbors, return random direction (will be handled by resolveTarget)
    if (validNeighbors.size === 0) {
      const rng = createRng(
        `${seed}:wdir:${turn}:${attackerTeamId}:${Date.now()}`
      )
      return Math.floor(rng() * DIRECTIONS.length)
    }

    // Calculate team centroids for direction calculation
    const attackerCentroid = attackerCells
      .reduce(
        (acc, c) => [acc[0] + c.centroid[0], acc[1] + c.centroid[1]],
        [0, 0]
      )
      .map((sum) => sum / attackerCells.length)

    const weights = DIRECTIONS.map((d) => {
      let score = 0

      // For each valid neighboring team, calculate direction from attacker to target
      for (const targetTeamId of validNeighbors) {
        const targetCells = cells.filter((c) => c.ownerTeamId === targetTeamId)
        const targetCentroid = targetCells
          .reduce(
            (acc, c) => [acc[0] + c.centroid[0], acc[1] + c.centroid[1]],
            [0, 0]
          )
          .map((sum) => sum / targetCells.length)

        // Calculate direction from attacker to target
        const dx = targetCentroid[0] - attackerCentroid[0]
        const dy = targetCentroid[1] - attackerCentroid[1]
        const aDeg = (Math.atan2(dy, dx) * 180) / Math.PI

        // Calculate how well this direction matches the current direction
        const diff = Math.abs(((aDeg - dirAngle[d] + 180) % 360) - 180)
        const w = Math.max(0, 1.0 - diff / 180)
        score += 0.5 + 1.5 * w
      }
      return score
    })

    const rng = createRng(
      `${seed}:wdir:${turn}:${attackerTeamId}:${Date.now()}`
    )
    return weightedChoice(weights, rng)
  }

  // Fast mode: auto-select team and direction, then auto-attack
  useEffect(() => {
    if (config.fastMode && uiStep === "team-select" && liveTeams.length > 0) {
      // Auto-select team
      const teamIndex = pickWeightedTeamIndex()
      setTeamWinner(teamIndex)
      setUiStep("dir-select")

      // Auto-select direction after team selection
      setTimeout(() => {
        const attacker = liveTeams[teamIndex]
        if (attacker) {
          const dirIndex = pickWeightedDirectionIndex(attacker.id)
          setDirWinner(dirIndex)
          setUiStep("attack-confirm")

          // Auto-attack after direction selection
          setTimeout(() => {
            const direction = DIRECTIONS[dirIndex]
            const r = applyAttack(attacker.id, direction)
            if (r.success) {
              setTimeout(() => playCapture(), 160)
              setTimeout(() => {
                const last = useGameStore.getState().history.slice(-1)[0]
                if (last?.attackerWon) playVictory()
                else playDefeat()
              }, 400)
            }

            // Reset UI state
            setTeamWinner(null)
            setDirWinner(null)
            setTeamSpinTarget(undefined)
            setDirSpinTarget(undefined)
            setUiStep("team-select")
            setShowAttackerInfo(false)
            setShowDefenderInfo(false)
            setPreviewTarget(undefined, undefined)
            setPreviewFromTeamId(undefined)
            setSuppressLastOverlay(true)
            setTimeout(() => setSuppressLastOverlay(false), 100)
          }, 1000) // 1 second delay to show the preview arrow
        }
      }, 500) // 0.5 second delay between team and direction selection
    }
  }, [
    config.fastMode,
    uiStep,
    liveTeams,
    applyAttack,
    setTeamWinner,
    setUiStep,
    setDirWinner,
    setPreviewTarget,
    setPreviewFromTeamId,
    setSuppressLastOverlay,
    pickWeightedTeamIndex,
    pickWeightedDirectionIndex
  ])

  const teamItems = liveTeams.map((t) => t.name)
  const dirItems = DIRECTIONS
  const DIR_TR: Record<string, string> = {
    N: "Kuzey",
    NE: "Kuzey Doğu",
    E: "Doğu",
    SE: "Güney Doğu",
    S: "Güney",
    SW: "Güney Batı",
    W: "Batı",
    NW: "Kuzey Batı"
  }

  const isGameOver = liveTeams.length <= 1 && liveTeams.length > 0
  const attackerTeam = teamWinner != null ? liveTeams[teamWinner] : undefined

  return (
    <div>
      <AnimatePresence>
        {toast && (
          <motion.div
            key="toast"
            initial={{ opacity: 0, y: -28, scale: 0.92 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: -28, scale: 0.92 }}
            transition={{ type: "spring", stiffness: 280, damping: 22 }}
            className="fixed left-1/2 top-8 z-50 -translate-x-1/2"
          >
            <motion.div
              className="relative overflow-visible rounded-2xl border border-emerald-400/40 bg-slate-900/95 px-6 py-4 text-base font-semibold text-white shadow-[0_0_20px_rgba(16,185,129,0.25)] backdrop-blur"
              animate={{
                boxShadow: [
                  "0 0 20px rgba(16,185,129,0.25)",
                  "0 0 34px rgba(248,250,252,0.35)",
                  "0 0 20px rgba(16,185,129,0.25)"
                ]
              }}
              transition={{ duration: 2.4, repeat: Infinity, repeatType: "mirror" }}
            >
              <motion.span
                className="pointer-events-none absolute -inset-10 -z-10 rounded-full bg-gradient-to-r from-emerald-400/30 via-amber-300/20 to-transparent blur-3xl"
                animate={{ rotate: [0, 12, -12, 0] }}
                transition={{ duration: 6, repeat: Infinity, ease: "easeInOut" }}
              />
              <div className="relative flex items-center gap-3">
                <motion.span
                  aria-hidden
                  className="text-2xl"
                  animate={{ scale: [1, 1.2, 1], rotate: [0, -12, 12, 0] }}
                  transition={{ duration: 1.4, repeat: Infinity, repeatType: "mirror" }}
                >
                  🏆
                </motion.span>
                <motion.span
                  className="leading-tight"
                  animate={{ color: ["#f8fafc", "#bbf7d0", "#f8fafc"] }}
                  transition={{ duration: 1.8, repeat: Infinity, repeatType: "mirror" }}
                >
                  {toast}
                </motion.span>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
      <div className="w-full p-0">
        <header className="text-center relative overflow-hidden">
          <div className="absolute inset-0 bg-gradient-to-r from-emerald-500/10 via-blue-500/10 to-purple-500/10 blur-3xl"></div>
          <div className="relative z-10">
            <div className="mb-4">
              <span className="inline-block px-4 py-2 bg-emerald-500/20 border border-emerald-400/30 rounded-full text-emerald-300 text-sm font-medium backdrop-blur-sm">
                🏆 Stratejik Futbol Savaşları
              </span>
            </div>
            <h1 className="text-6xl md:text-7xl font-black tracking-tight gradient-text animate-fade-in-up mb-4 group relative">
              Futbol
              <span className="block text-transparent bg-clip-text bg-gradient-to-r from-emerald-400 via-blue-400 to-purple-400 animate-pulse">
                Emperyalizmi
              </span>
              {/* Version Tooltip */}
              <div className="absolute -top-2 -right-2 opacity-0 group-hover:opacity-100 transition-all duration-300 transform translate-y-1 group-hover:translate-y-0">
                <div className="bg-slate-800/90 border border-emerald-400/30 rounded-lg px-3 py-1 text-xs font-mono text-emerald-300 backdrop-blur-sm shadow-lg">
                  v0.2.2
                </div>
              </div>
            </h1>
            <p className="text-xl text-slate-300 max-w-2xl mx-auto leading-relaxed animate-fade-in-up">
              Takımlarınızla dünyayı fethedin. Strateji, şans ve futbol tutkunuzla imparatorluğunuzu kurun.
            </p>
          </div>
        </header>

        {!gameStarted && (
          <div className="relative mx-auto mt-12 max-w-4xl animate-fade-in-scale">
            {/* Hero Section */}
            <div className="mb-8 text-center">
              <div className="inline-flex items-center gap-3 px-6 py-3 bg-gradient-to-r from-emerald-500/20 to-blue-500/20 border border-emerald-400/30 rounded-full backdrop-blur-sm mb-6">
                <div className="w-2 h-2 bg-emerald-400 rounded-full animate-pulse"></div>
                <span className="text-emerald-300 font-medium">Oyun Hazır</span>
                <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse"></div>
              </div>
              <h2 className="text-3xl font-bold text-white mb-3">
                İmparatorluğunuzu Kurun
              </h2>
              <p className="text-slate-400 text-lg">
                Aşağıdaki ayarları yapılandırın ve futbol dünyasında hüküm sürmeye başlayın
              </p>
            </div>

            {/* Main Configuration Card */}
            <div className="relative">
              {/* Background Effects */}
              <div className="absolute -inset-1 bg-gradient-to-r from-emerald-500/20 via-blue-500/20 to-purple-500/20 rounded-3xl blur-sm"></div>
              <div className="absolute inset-0 bg-gradient-to-br from-slate-800/90 via-slate-900/95 to-slate-800/90 rounded-3xl border border-slate-700/50 backdrop-blur-xl"></div>
              
              <div className="relative p-8">
                <div className="grid gap-6 lg:grid-cols-2">
                  {/* Left Column */}
                  <div className="space-y-6">
                    <div className="group">
                      <label className="mb-3 block text-sm font-semibold text-emerald-300 uppercase tracking-wide">
                        🌍 Ülke Seçimi
                      </label>
                      <select
                        value={selectedCountry}
                        onChange={(e) =>
                          setCountry(e.target.value as (typeof COUNTRIES)[number])
                        }
                        className="w-full rounded-xl border border-slate-600/50 bg-slate-800/70 px-4 py-3 text-white focus:border-emerald-400 focus:ring-2 focus:ring-emerald-400/20 transition-all duration-200 backdrop-blur-sm hover:bg-slate-700/70"
                      >
                        {COUNTRIES.map((c) => (
                          <option key={c} value={c}>
                            {c}
                          </option>
                        ))}
                      </select>
                    </div>

                    <div className="group">
                      <label className="mb-3 block text-sm font-semibold text-blue-300 uppercase tracking-wide">
                        ⚽ Takım Sayısı
                      </label>
                      <input
                        type="number"
                        min={2}
                        max={25}
                        value={numTeams}
                        onChange={(e) =>
                          setNumTeams(parseInt(e.target.value || "0", 10))
                        }
                        className="w-full rounded-xl border border-slate-600/50 bg-slate-800/70 px-4 py-3 text-white focus:border-blue-400 focus:ring-2 focus:ring-blue-400/20 transition-all duration-200 backdrop-blur-sm hover:bg-slate-700/70"
                      />
                      <p className="mt-2 text-xs text-slate-400">2-25 arası takım seçebilirsiniz</p>
                    </div>
                  </div>

                  {/* Right Column */}
                  <div className="space-y-6">
                    <div className="group">
                      <label className="mb-3 block text-sm font-semibold text-purple-300 uppercase tracking-wide">
                        🎨 Harita Görünümü
                      </label>
                      <select
                        value={mapColoring}
                        onChange={(e) =>
                          setMapColoring(e.target.value as "solid" | "striped")
                        }
                        className="w-full rounded-xl border border-slate-600/50 bg-slate-800/70 px-4 py-3 text-white focus:border-purple-400 focus:ring-2 focus:ring-purple-400/20 transition-all duration-200 backdrop-blur-sm hover:bg-slate-700/70"
                      >
                        <option value="striped">Şeritli Desenler</option>
                        <option value="solid">Düz Renkler</option>
                      </select>
                    </div>

                    <div className="group">
                      <label className="mb-3 block text-sm font-semibold text-amber-300 uppercase tracking-wide">
                        ⚙️ Oyun Modu
                      </label>
                      <select
                        value={
                          config.fastMode
                            ? "fast"
                            : config.manualMode
                            ? "manual"
                            : "normal"
                        }
                        onChange={(e) => {
                          const newConfig = {
                            ...config,
                            fastMode: e.target.value === "fast",
                            manualMode: e.target.value === "manual"
                          }
                          setConfig(newConfig)
                          saveConfig(newConfig)
                        }}
                        className="w-full rounded-xl border border-slate-600/50 bg-slate-800/70 px-4 py-3 text-white focus:border-amber-400 focus:ring-2 focus:ring-amber-400/20 transition-all duration-200 backdrop-blur-sm hover:bg-slate-700/70"
                      >
                        <option value="normal">🎯 Normal (Spinner ile)</option>
                        <option value="fast">🚀 Hızlı (Otomatik)</option>
                        <option value="manual">🎮 Manuel (Elle Seçim)</option>
                      </select>
                      <p className="mt-2 text-xs text-slate-400">
                        {config.fastMode ? "Hızlı otomatik oyun" : 
                         config.manualMode ? "Manuel kontrol" : 
                         "Spinner ile rastgele seçim"}
                      </p>
                    </div>
                  </div>
                </div>

                {/* Start Button */}
                <div className="mt-8 pt-6 border-t border-slate-700/50">
                  <button
                    className="group relative w-full bg-gradient-to-r from-emerald-500 to-blue-500 hover:from-emerald-400 hover:to-blue-400 text-white font-bold py-4 px-8 rounded-2xl transition-all duration-300 transform hover:scale-105 hover:shadow-2xl focus:outline-none focus:ring-4 focus:ring-emerald-400/30"
                    onClick={() => setGameStarted(true)}
                  >
                    <span className="relative z-10 flex items-center justify-center gap-3">
                      <span className="text-lg">🏆</span>
                      <span className="text-lg">Oyunu Başlat</span>
                      <span className="text-lg">⚽</span>
                    </span>
                    <div className="absolute inset-0 bg-gradient-to-r from-emerald-400 to-blue-400 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    <div className="absolute inset-0 rounded-2xl bg-white/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  </button>
                </div>
              </div>
            </div>

            {/* Feature Cards */}
            <div className="mt-12 grid gap-6 md:grid-cols-3">
              <div className="group p-6 bg-slate-800/40 border border-slate-700/50 rounded-2xl backdrop-blur-sm hover:bg-slate-700/40 transition-all duration-300 animate-fade-in-left hover:scale-105 hover:shadow-xl hover:shadow-emerald-500/10">
                <div className="text-3xl mb-3 animate-float">🎯</div>
                <h3 className="text-lg font-semibold text-white mb-2">Stratejik Savaşlar</h3>
                <p className="text-slate-400 text-sm">Takımlarınızla dünyayı fethedin ve stratejik hamlelerle rakiplerinizi alt edin.</p>
              </div>
              <div className="group p-6 bg-slate-800/40 border border-slate-700/50 rounded-2xl backdrop-blur-sm hover:bg-slate-700/40 transition-all duration-300 animate-fade-in-up hover:scale-105 hover:shadow-xl hover:shadow-blue-500/10" style={{animationDelay: '0.2s'}}>
                <div className="text-3xl mb-3 animate-float" style={{animationDelay: '0.5s'}}>🎲</div>
                <h3 className="text-lg font-semibold text-white mb-2">Şans ve Beceri</h3>
                <p className="text-slate-400 text-sm">Hem şans hem de futbol bilginizle kazanın. Her hamle yeni bir macera.</p>
              </div>
              <div className="group p-6 bg-slate-800/40 border border-slate-700/50 rounded-2xl backdrop-blur-sm hover:bg-slate-700/40 transition-all duration-300 animate-fade-in-right hover:scale-105 hover:shadow-xl hover:shadow-purple-500/10" style={{animationDelay: '0.4s'}}>
                <div className="text-3xl mb-3 animate-float" style={{animationDelay: '1s'}}>🏆</div>
                <h3 className="text-lg font-semibold text-white mb-2">İmparatorluk Kurun</h3>
                <p className="text-slate-400 text-sm">En büyük futbol imparatorluğunu kurun ve dünyayı tek çatı altında toplayın.</p>
              </div>
            </div>
          </div>
        )}

        {gameStarted && (
          <div className="mt-8 grid grid-cols-1 gap-6 lg:grid-cols-12 animate-fade-in-up min-h-[600px]">
            <div className="lg:col-span-8 h-full flex flex-col">
              <div className="flex-1 w-full">
                <MapView />
              </div>
              <div className="border-t border-slate-700/50 p-4 flex items-center justify-between bg-slate-800/30 backdrop-blur-sm">
                <div className="grid grid-cols-2 gap-2 sm:grid-cols-4">
                  {teams.map((t) => (
                    <div
                      key={t.id}
                      className="flex items-center gap-2 rounded-xl bg-slate-800/60 border border-slate-700/50 p-3 hover:bg-slate-700/60 transition-all duration-200"
                    >
                      <div 
                        className="w-3 h-3 rounded-full border border-white/20"
                        style={{ backgroundColor: t.color }}
                      ></div>
                      <span className="text-sm font-semibold tracking-wide text-white">
                        {t.name}
                      </span>
                      <span className="ml-auto text-xs font-mono text-emerald-400 bg-emerald-500/20 px-2 py-1 rounded-full">
                        {cells.filter((c) => c.ownerTeamId === t.id).length}
                      </span>
                    </div>
                  ))}
                </div>
                <button
                  className="rounded-xl bg-gradient-to-r from-rose-500 to-red-600 hover:from-rose-400 hover:to-red-500 px-4 py-2 text-white font-medium transition-all duration-200 transform hover:scale-105 shadow-lg"
                  onClick={() => {
                    window.location.href = "/"
                  }}
                >
                  🔄 Yeniden Başlat
                </button>
              </div>
            </div>

            <div className="flex flex-col gap-4 lg:col-span-4">
              <>
              <div className="relative">
                {/* Background Effects */}
                <div className="absolute -inset-1 bg-gradient-to-r from-emerald-500/20 via-blue-500/20 to-purple-500/20 rounded-2xl blur-sm"></div>
                <div className="absolute inset-0 bg-gradient-to-br from-slate-800/90 via-slate-900/95 to-slate-800/90 rounded-2xl border border-slate-700/50 backdrop-blur-xl"></div>
                
                <div className="relative p-6">
                  <div className="flex items-center justify-between mb-6">
                    <h2 className="text-2xl font-bold text-white flex items-center gap-3">
                      <span className="text-3xl">⚔️</span>
                      <span className="bg-gradient-to-r from-emerald-400 to-blue-400 bg-clip-text text-transparent">
                        Tur {turn + 1}
                      </span>
                    </h2>
                    <div className="flex items-center gap-2 px-3 py-1 bg-slate-700/50 rounded-full border border-slate-600/50">
                      <div className="w-2 h-2 bg-emerald-400 rounded-full animate-pulse"></div>
                      <span className="text-xs text-emerald-300 font-medium">Aktif</span>
                    </div>
                  </div>
                {attackerTeam && showAttackerInfo && (
                  <motion.div
                    initial={{ opacity: 0, y: -6 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.25 }}
                    className="mb-4"
                  >
                    <div className="bg-gradient-to-r from-red-500/20 to-orange-500/20 border border-red-400/30 rounded-xl p-4 backdrop-blur-sm">
                      <div className="flex items-center gap-3">
                        <div className="text-2xl">⚔️</div>
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <span className="font-semibold text-red-300">Saldıran Takım</span>
                            <span
                              className="inline-block h-3 w-3 rounded-full border border-white/20"
                              style={{ backgroundColor: attackerTeam.color }}
                            />
                          </div>
                          <div className="text-white font-bold text-lg">{attackerTeam.name}</div>
                          <div className="flex items-center gap-2 mt-1">
                            <span className="text-xs text-slate-300">OVR:</span>
                            <span className="text-sm font-semibold text-emerald-400">
                              {attackerTeam.overall ?? 75}
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </motion.div>
                )}
                {defenderInfo && showDefenderInfo && (
                  <motion.div
                    initial={{ opacity: 0, y: -6 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.25 }}
                    className="mb-4"
                  >
                    <div className="bg-gradient-to-r from-blue-500/20 to-purple-500/20 border border-blue-400/30 rounded-xl p-4 backdrop-blur-sm">
                      <div className="flex items-center gap-3">
                        <div className="text-2xl">🛡️</div>
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <span className="font-semibold text-blue-300">Savunan Takım</span>
                          </div>
                          <div className="text-white font-bold text-lg">{defenderInfo.name}</div>
                          <div className="flex items-center gap-2 mt-1">
                            <span className="text-xs text-slate-300">OVR:</span>
                            <span className="text-sm font-semibold text-emerald-400">
                              {defenderInfo.ovr}
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                    {dirWinner !== null && (
                      <div className="mt-3 bg-gradient-to-r from-amber-500/20 to-yellow-500/20 border border-amber-400/30 rounded-xl p-3 backdrop-blur-sm">
                        <div className="flex items-center gap-2">
                          <div className="text-lg">🧭</div>
                          <span className="font-semibold text-amber-300">Saldırı Yönü:</span>
                          <span className="text-white font-medium">{DIR_TR[DIRECTIONS[dirWinner]]}</span>
                        </div>
                      </div>
                    )}
                  </motion.div>
                )}
                <div className="flex flex-col items-center gap-4">
                  {/* Fast Mode Status */}
                  {config.fastMode && (
                    <div className="bg-gradient-to-r from-emerald-500/20 to-green-500/20 border border-emerald-400/30 rounded-xl p-4 backdrop-blur-sm">
                      <div className="text-center">
                        <div className="text-2xl mb-2">🚀</div>
                        <div className="text-lg font-bold text-emerald-300 mb-1">
                          Hızlı Oyun Modu
                        </div>
                        <div className="text-sm text-slate-300 mb-3">
                          Otomatik saldırılar yapılıyor...
                        </div>
                        <button
                          onClick={() => {
                            // Force next turn in fast mode
                            if (uiStep === "team-select") {
                              const teamIndex = pickWeightedTeamIndex()
                              setTeamWinner(teamIndex)
                              setUiStep("dir-select")
                            }
                          }}
                          className="rounded-lg bg-emerald-600 hover:bg-emerald-500 px-4 py-2 text-sm text-white font-medium transition-all duration-200 transform hover:scale-105 shadow-lg"
                        >
                          ⚡ Hızlı Tur
                        </button>
                      </div>
                    </div>
                  )}

                  {/* Manual Mode Status */}
                  {config.manualMode && (
                    <div className="bg-gradient-to-r from-blue-500/20 to-purple-500/20 border border-blue-400/30 rounded-xl p-4 backdrop-blur-sm">
                      <div className="text-center">
                        <div className="text-2xl mb-2">🎮</div>
                        <div className="text-lg font-bold text-blue-300 mb-1">
                          Manuel Oyun Modu
                        </div>
                        <div className="text-sm text-slate-300 mb-3">
                          Saldıran, savunan ve sonucu elle seçin
                        </div>

                      {/* Manual Team Selection */}
                      {uiStep === "team-select" && (
                        <div className="mt-4 space-y-2">
                          <div className="text-sm font-medium text-slate-300">
                            Saldıran Takım:
                          </div>
                          <select
                            value={teamWinner || ""}
                            onChange={(e) =>
                              setTeamWinner(parseInt(e.target.value))
                            }
                            className="w-full rounded-lg border-slate-600 bg-slate-700 px-3 py-2 text-sm text-white"
                          >
                            <option value="">Takım Seçin</option>
                            {liveTeams.map((team, index) => (
                              <option key={team.id} value={index}>
                                {team.name}
                              </option>
                            ))}
                          </select>
                          {teamWinner !== null && (
                        <button
                          onClick={() => setUiStep("dir-select")}
                          className="w-full bg-gradient-to-r from-emerald-500 to-blue-500 hover:from-emerald-400 hover:to-blue-400 text-white font-bold py-3 px-4 rounded-xl transition-all duration-300 transform hover:scale-105 shadow-lg"
                        >
                          ➡️ Devam Et
                        </button>
                          )}
                        </div>
                      )}

                      {/* Manual Direction Selection */}
                      {uiStep === "dir-select" && teamWinner !== null && (
                        <div className="mt-4 space-y-2">
                          <div className="text-sm font-medium text-slate-300">
                            Saldırı Yönü:
                          </div>
                          <select
                            value={dirWinner || ""}
                            onChange={(e) =>
                              setDirWinner(parseInt(e.target.value))
                            }
                            className="w-full rounded-lg border-slate-600 bg-slate-700 px-3 py-2 text-sm text-white"
                          >
                            <option value="">Yön Seçin</option>
                            {DIRECTIONS.map((dir, index) => (
                              <option key={dir} value={index}>
                                {dir}
                              </option>
                            ))}
                          </select>
                          {dirWinner !== null && (
                            <button
                              onClick={() => setUiStep("attack-confirm")}
                              className="w-full bg-gradient-to-r from-emerald-500 to-blue-500 hover:from-emerald-400 hover:to-blue-400 text-white font-bold py-3 px-4 rounded-xl transition-all duration-300 transform hover:scale-105 shadow-lg"
                            >
                              ➡️ Devam Et
                            </button>
                          )}
                        </div>
                      )}

                      {/* Manual Result Selection */}
                      {uiStep === "attack-confirm" &&
                        teamWinner !== null &&
                        dirWinner !== null && (
                          <div className="mt-4 space-y-2">
                            <div className="text-sm font-medium text-slate-300">
                              Saldırı Sonucu:
                            </div>
                            <div className="grid grid-cols-2 gap-2">
                              <button
                                onClick={() => {
                                  // Manual attack with attacker winning
                                  if (teamWinner == null || dirWinner == null)
                                    return
                                  const attackerTeam = liveTeams[teamWinner]
                                  const dir = DIRECTIONS[dirWinner]
                                  if (!attackerTeam) return

                                  // Apply manual attack result
                                  const result = applyAttack(
                                    attackerTeam.id,
                                    dir
                                  )
                                  if (result.success) {
                                    // Reset for next turn
                                    setTeamWinner(null)
                                    setDirWinner(null)
                                    setUiStep("team-select")
                                    setPreviewTarget(undefined, undefined)
                                    setPreviewFromTeamId(undefined)
                                    setSuppressLastOverlay(true)
                                    setTimeout(
                                      () => setSuppressLastOverlay(false),
                                      100
                                    )
                                  }
                                }}
                                className="flex-1 bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-400 hover:to-emerald-400 text-white font-bold py-3 px-4 rounded-xl transition-all duration-300 transform hover:scale-105 shadow-lg text-sm"
                              >
                                ✅ Saldıran Kazandı
                              </button>
                              <button
                                onClick={() => {
                                  // Manual attack with defender winning
                                  if (teamWinner == null || dirWinner == null)
                                    return
                                  const attackerTeam = liveTeams[teamWinner]
                                  const dir = DIRECTIONS[dirWinner]
                                  if (!attackerTeam) return

                                  // Apply manual attack result (defender wins)
                                  const result = applyAttack(
                                    attackerTeam.id,
                                    dir
                                  )
                                  if (result.success) {
                                    // Reset for next turn
                                    setTeamWinner(null)
                                    setDirWinner(null)
                                    setUiStep("team-select")
                                    setPreviewTarget(undefined, undefined)
                                    setPreviewFromTeamId(undefined)
                                    setSuppressLastOverlay(true)
                                    setTimeout(
                                      () => setSuppressLastOverlay(false),
                                      100
                                    )
                                  }
                                }}
                                className="flex-1 bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-400 hover:to-purple-400 text-white font-bold py-3 px-4 rounded-xl transition-all duration-300 transform hover:scale-105 shadow-lg text-sm"
                              >
                                🛡️ Savunan Kazandı
                              </button>
                            </div>
                          </div>
                        )}
                    </div>
                  )}

                  {/* Team Spinner */}
                  {!config.fastMode &&
                    !config.manualMode &&
                    uiStep !== "team" &&
                    teamWinner === null && (
                      <button
                        onClick={() => {
                          setUiStep("team")
                          setTeamSpinTarget(pickWeightedTeamIndex())
                          // Immediately suppress old overlays and clear any preview
                          try {
                            setSuppressLastOverlay(true)
                            setPreviewTarget(undefined, undefined)
                            setPreviewFromTeamId(undefined)
                          } catch (e) {
                            console.warn(e)
                          }
                        }}
                        className="w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-bold py-3 px-4 rounded-xl transition-all duration-300 transform hover:scale-105 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
                        disabled={disabledTeamBtn}
                      >
                        🎯 Saldıran Takımı Seç
                      </button>
                    )}
                  {!config.fastMode &&
                    !config.manualMode &&
                    (uiStep === "team" || uiStep === "dir-select") &&
                    teamSpinTarget !== undefined && (
                      <Spinner
                        items={
                          teamItems.length
                            ? teamItems.map((t) => t.slice(0, 3))
                            : ["-"]
                        }
                        colors={liveTeams.map((t) => t.color)}
                        winnerIndex={teamSpinTarget}
                        fullNames={teamItems.length ? teamItems : undefined}
                        onDone={(i) => {
                          setTeamWinner(i)
                          setUiStep("dir-select")
                          setShowAttackerInfo(false)
                          try {
                            const attacker = liveTeams[i]
                            if (attacker) {
                              setSuppressLastOverlay(true)
                              setPreviewTarget(
                                attacker.capitalCellId,
                                undefined
                              )
                              setPreviewFromTeamId(attacker.id)
                            }
                          } catch (e) {
                            console.warn(e)
                          }
                          setTimeout(() => setShowAttackerInfo(true), 2000)
                        }}
                        sizePx={spinnerSize}
                      />
                    )}
                  {/* Direction Spinner */}
                  {!config.fastMode &&
                    !config.manualMode &&
                    teamWinner !== null &&
                    uiStep === "dir-select" && (
                      <button
                        onClick={() => {
                          setUiStep("dir")
                          setDirSpinTarget(
                            pickWeightedDirectionIndex(liveTeams[teamWinner].id)
                          )
                        }}
                        className="w-full bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-400 hover:to-orange-400 text-white font-bold py-3 px-4 rounded-xl transition-all duration-300 transform hover:scale-105 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
                        disabled={disabledDirBtn}
                      >
                        🧭 Saldırı Yönünü Seç
                      </button>
                    )}
                  {!config.fastMode &&
                    !config.manualMode &&
                    (uiStep === "dir" || uiStep === "attack-confirm") &&
                    dirSpinTarget !== undefined && (
                      <Spinner
                        key={`dir-spinner-${dirSpinTarget}-${turn}`}
                        items={dirItems}
                        winnerIndex={dirSpinTarget}
                        onDone={(i) => {
                          setDirWinner(i)
                          setUiStep("attack-confirm")
                          setShowDefenderInfo(false)
                          try {
                            if (teamWinner != null) {
                              const attacker = liveTeams[teamWinner]
                              const direction = DIRECTIONS[i]
                              const t = resolveTarget(attacker.id, direction)

                              // Set preview arrow when direction is selected
                              if (t) {
                                setPreviewTarget(t.fromCellId, t.toCellId)
                              }

                              if (!t) {
                                // Check if this team has any valid neighbors at all
                                const attackerCells = cells.filter(
                                  (c) => c.ownerTeamId === attacker.id
                                )
                                const validNeighbors = new Set<number>()
                                for (const c of attackerCells) {
                                  for (const nIdx of c.neighbors || []) {
                                    const nb = cells[nIdx]
                                    if (!nb || nb.ownerTeamId === attacker.id)
                                      continue
                                    validNeighbors.add(nb.ownerTeamId)
                                  }
                                }

                                if (validNeighbors.size === 0) {
                                  // No valid targets for this team, skip to next team
                                  setToast(
                                    "Bu takımın saldırabileceği hedef yok. Sonraki takıma geçiliyor."
                                  )
                                  setTimeout(() => {
                                    setToast("")
                                    setUiStep("team")
                                    setTeamWinner(null)
                                    setDirWinner(null)
                                    setDirSpinTarget(undefined)
                                    setSuppressLastOverlay(false)
                                    setPreviewTarget(undefined, undefined)
                                    setPreviewFromTeamId(undefined)
                                  }, 2000)
                                  return
                                }

                                setToast(
                                  "Belirtilen yönde takım yok. Çark tekrar çevriliyor."
                                )
                                // Auto-hide toast after 3 seconds
                                setTimeout(() => {
                                  setToast("")
                                }, 3000)
                                // re-spin direction automatically
                                const newTarget = pickWeightedDirectionIndex(
                                  attacker.id
                                )
                                setUiStep("dir")
                                // Use setTimeout to ensure state updates are processed
                                setTimeout(() => {
                                  setDirSpinTarget(newTarget)
                                }, 100) // Increased delay
                                return
                              }
                              setSuppressLastOverlay(true)
                              setPreviewTarget(t.fromCellId, t.toCellId)
                              setPreviewFromTeamId(attacker.id)
                            }
                          } catch (e) {
                            console.warn(e)
                          }
                          setTimeout(() => setShowDefenderInfo(true), 2000)
                        }}
                        sizePx={spinnerSize}
                      />
                    )}
                  {/* Attack Button */}
                  {!config.fastMode &&
                    !config.manualMode &&
                    dirWinner !== null &&
                    uiStep === "attack-confirm" && (
                      <button
                        className="w-full bg-gradient-to-r from-red-500 to-rose-500 hover:from-red-400 hover:to-rose-400 text-white font-bold py-3 px-4 rounded-xl transition-all duration-300 transform hover:scale-105 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
                        disabled={disabledApplyBtn}
                        onClick={() => {
                          if (teamWinner == null || dirWinner == null) return
                          const attackerTeam = liveTeams[teamWinner]
                          const dir = DIRECTIONS[dirWinner]
                          if (!attackerTeam) return
                          playClick()
                          setUiStep("attacking")
                          // Freeze map at current snapshot during animation & toast
                          try {
                            const idx =
                              useGameStore.getState().snapshots.length - 1
                            setFrozenSnapshotIndex(idx >= 0 ? idx : undefined)
                          } catch (e) {
                            console.warn(e)
                          }
                          setTimeout(() => {
                            const r = applyAttack(attackerTeam.id, dir)
                            if (!r.success) {
                              setToast(
                                "Uygun hedef bulunamadı. Tekrar deneyin."
                              )
                            } else {
                              setTimeout(() => playCapture(), 160)
                              // Play victory/defeat motif after state updates propagate slightly
                              setTimeout(() => {
                                const last = useGameStore
                                  .getState()
                                  .history.slice(-1)[0]
                                if (last?.attackerWon) playVictory()
                                else playDefeat()
                              }, 260)
                            }
                            // Unfreeze after toast duration
                            setTimeout(
                              () => setFrozenSnapshotIndex(undefined),
                              1600
                            )
                            setUiStep(null)
                            setTeamWinner(null)
                            setDirWinner(null)
                            setTeamSpinTarget(undefined)
                            setDirSpinTarget(undefined)
                            setShowAttackerInfo(false)
                            setShowDefenderInfo(false)
                            setSuppressLastOverlay(false)
                            setPreviewTarget(undefined, undefined)
                            setPreviewFromTeamId(undefined)
                          }, 800)
                        }}
                      >
                        ⚔️ Saldırıyı Başlat
                      </button>
                    )}
                </div>
              </div>
              <div className="relative">
                {/* Background Effects */}
                <div className="absolute -inset-1 bg-gradient-to-r from-purple-500/20 via-pink-500/20 to-blue-500/20 rounded-2xl blur-sm"></div>
                <div className="absolute inset-0 bg-gradient-to-br from-slate-800/90 via-slate-900/95 to-slate-800/90 rounded-2xl border border-slate-700/50 backdrop-blur-xl"></div>
                
                <div className="relative p-6">
                  <h2 className="mb-4 text-xl font-bold text-white flex items-center gap-3">
                    <span className="text-2xl">📜</span>
                    <span className="bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
                      Savaş Geçmişi
                    </span>
                  </h2>
                  <div className="max-h-[240px] overflow-auto rounded-xl bg-slate-900/50 p-4 text-sm border border-slate-700/50 backdrop-blur-sm">
                  {history.length === 0 ? (
                    <div className="text-slate-400">Henüz hamle yok.</div>
                  ) : (
                    <ul className="space-y-1">
                      {history
                        .slice()
                        .reverse()
                        .map((h, idx) => (
                          <li
                            key={idx}
                            className="flex items-center justify-between rounded-lg bg-slate-800/60 border border-slate-700/50 p-3 hover:bg-slate-700/60 transition-all duration-200"
                          >
                            <div className="flex items-center gap-3">
                              <span className="text-xs font-mono text-emerald-400 bg-emerald-500/20 px-2 py-1 rounded-full">
                                #{h.turn}
                              </span>
                              <div className="flex items-center gap-2 text-xs">
                                <span className="font-semibold text-white">
                                  {teams.find((t) => t.id === h.attackerTeamId)
                                    ?.name ?? "?"}
                                </span>
                                <span className="text-slate-400">→</span>
                                <span className="text-amber-400">{h.direction}</span>
                                <span className="text-slate-400">→</span>
                                <span className="font-semibold text-white">
                                  {h.defenderTeamId != null && h.defenderTeamId >= 0
                                    ? teams.find((t) => t.id === h.defenderTeamId)
                                        ?.name ?? "?"
                                    : "Neutral"}
                                </span>
                                <span className="text-lg">
                                  {h.attackerWon ? "✅" : "❌"}
                                </span>
                              </div>
                            </div>
                            <span className="text-xs text-slate-400 bg-slate-700/50 px-2 py-1 rounded-full">
                              {new Date(h.timestamp).toLocaleTimeString()}
                            </span>
                          </li>
                        ))}
                    </ul>
                  )}
                </div>
              </div>
              </>
            </div>
          </div>
        )}
      </div>
      {/* Mobile bar remains */}
      <div className="fixed inset-x-0 bottom-0 z-40 block border-t bg-white/95 p-3 backdrop-blur md:hidden">
        <div className="mx-auto flex w-full items-center justify-center gap-2">
          <button
            aria-label="Spin Team"
            className="rounded bg-indigo-600 px-3 py-2 text-white shadow transition active:scale-95 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            onClick={() => {
              const idx = Math.max(
                0,
                Math.min(
                  Math.max(1, liveTeams.length) - 1,
                  Math.floor(rngRef.current() * Math.max(1, liveTeams.length))
                )
              )
              setTeamWinner(idx)
            }}
          >
            Team
          </button>
          <button
            aria-label="Spin Direction"
            className="rounded bg-indigo-600 px-3 py-2 text-white shadow transition active:scale-95 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            onClick={() => {
              const idx = Math.max(
                0,
                Math.min(
                  DIRECTIONS.length - 1,
                  Math.floor(rngRef.current() * DIRECTIONS.length)
                )
              )
              setDirWinner(idx)
            }}
          >
            Dir
          </button>
          <button
            aria-label="Apply Attack"
            className="rounded bg-emerald-600 px-3 py-2 text-white shadow transition active:scale-95 focus:outline-none focus:ring-2 focus:ring-emerald-500"
            onClick={() => {
              if (teamWinner == null || dirWinner == null) return
              const attackerTeam = liveTeams[teamWinner]
              const dir = DIRECTIONS[dirWinner]
              if (!attackerTeam) return
              playClick()
              applyAttack(attackerTeam.id, dir)
              setTimeout(() => playCapture(), 120)
            }}
          >
            Go
          </button>
          <button
            aria-label="Fast Auto Turn"
            className="rounded bg-rose-600 px-3 py-2 text-white shadow transition active:scale-95 focus:outline-none focus:ring-2 focus:ring-rose-500"
            onClick={() => {
              const r = playAutoTurn()
              if (r.success) {
                playClick()
                setTimeout(() => playCapture(), 120)
              }
            }}
          >
            Auto
          </button>
        </div>
      </div>
      {isGameOver && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/40 p-4">
          <div className="w-full rounded-lg bg-white p-6 shadow-xl">
            <h3 className="text-xl font-semibold">Game Over</h3>
            <p className="mt-2 text-gray-700">Winner: {liveTeams[0]?.name}</p>
            <div className="mt-4 flex justify-end gap-2">
              <button
                className="rounded bg-gray-700 px-4 py-2 text-white hover:bg-gray-800"
                onClick={() => window.location.reload()}
              >
                New Game
              </button>
              <button
                className="rounded bg-rose-600 px-4 py-2 text-white hover:bg-rose-700"
                onClick={() => {
                  const r = playAutoTurn()
                  if (r.success) {
                    playClick()
                    setTimeout(() => playCapture(), 120)
                  }
                }}
              >
                Fast Auto Turn
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default App
